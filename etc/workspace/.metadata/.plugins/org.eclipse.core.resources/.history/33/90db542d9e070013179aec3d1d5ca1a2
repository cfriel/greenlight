package com.greenlight.integration;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
import com.thoughtworks.xstream.io.xml.DomDriver;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;

import net.sf.json.JSONObject;
import net.sf.json.xml.XMLSerializer;

import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.apache.camel.Processor;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.dataformat.xmljson.XmlJsonDataFormat;
import org.apache.camel.model.RoutesDefinition;
import org.apache.camel.spring.Main;
import org.codehaus.jackson.map.ObjectMapper;

/**
 * A simple example router from a file system to an ActiveMQ queue and then to a
 * file system
 * 
 * @version
 */
public class FeedRouteBuilder extends RouteBuilder {

    /**
     * Allow this route to be run as an application
     */
    public static void main(String[] args) throws Exception {
        new Main().run(args);
    }

    public void configure() {

//        // populate the message queue with some messages
//        from("file:src/data?noop=true").to("jms:test.MyQueue");
//
//        from("jms:test.MyQueue").to("direct:marshal");
//
//        XmlJsonDataFormat xmlToJson = new XmlJsonDataFormat();
//
//        xmlToJson.setForceTopLevelObject(true);
//        xmlToJson.setTrimSpaces(true);
//        xmlToJson.setRootName("newRoot");
//        xmlToJson.setSkipNamespaces(true);
//        xmlToJson.setRemoveNamespacePrefixes(true);
//        xmlToJson.setExpandableProperties(Arrays.asList("d", "e"));
//
//        from("direct:marshal").marshal(xmlToJson).convertBodyTo(String.class).to("direct:json");
//
//        from("direct:json").to("mongodb:myDb?database=examples&collection=camel&operation=insert");

        from("timer://foo?period=5000").process(new Processor() {
            public void process(Exchange exchange) {
                Message in = exchange.getIn();
                in.setBody("{}");
            }
        }).to("direct:mongo");

        from("direct:mongo").to("mongodb:meteor?database=meteor&collection=feeds&operation=findAll").filter()
            .method(FeedListener.class, "onFeedUpdated").to("mock:end");

    }

    public static class FeedListener {
        
        public static FeedListener Instance = new FeedListener();
        
        private HashMap<String, Object> feeds;
        
        public FeedListener() {
            feeds = new HashMap<String, Object>();
        }

        public boolean onFeedUpdated(Exchange exchange) {
            try {
                Message m = exchange.getIn();
                Object obj = m.getBody();

                if (obj instanceof ArrayList) {

                    ArrayList arr = (ArrayList)obj;

                    for (Object item : arr) {
                        
                        String json = item.toString();

//                        String json = "{ \"routes\" : "
//                                      + "    [ "
//                                      + "      { \"route\" : "
//                                      + "          { \"id\" : \"bar\" , \"children\" : "
//                                      + "              [ "
//                                      + "                 {\"from\" : {\"uri\" : \"direct:bar\" }, \"to\" : {\"uri\" : \"uri:mock:bar\"} }"
//                                      + "              ]" + "          }" + "      }" + "    ]" + "}";

                        HashMap<String, Object> result = new ObjectMapper().readValue(json, HashMap.class);
                        
                        XStream xStream = new XStream(new DomDriver());
                        xStream.alias("map", java.util.Map.class);
//                        String xml = xStream.toXML(result);
                        
                        String id = (String) result.get("_id");
                        String xml = (String) result.get("xml");

//                        StringReader reader = new StringReader(xml);
//                        StringWriter writer = new StringWriter();
//                        TransformerFactory tFactory = TransformerFactory.newInstance();
//                        Transformer transformer = tFactory
//                            .newTransformer(new javax.xml.transform.stream.StreamSource("map.xsl"));
//
//                        transformer.transform(new javax.xml.transform.stream.StreamSource(reader),
//                                              new javax.xml.transform.stream.StreamResult(writer));
//
//                        String mapped = writer.toString();

                        InputStream is = new ByteArrayInputStream(xml.getBytes());

                        RoutesDefinition routes = exchange.getContext().loadRoutesDefinition(is);

                        exchange.getContext().addRouteDefinitions(routes.getRoutes());
                    }
                }
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }

            return true;
        }
    }
}
