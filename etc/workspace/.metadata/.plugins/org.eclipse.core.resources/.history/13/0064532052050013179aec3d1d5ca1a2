package com.greenlight.integration;

import java.util.ArrayList;
import java.util.List;

import org.apache.xerces.xs.StringList;
import org.apache.xerces.xs.XSComplexTypeDefinition;
import org.apache.xerces.xs.XSElementDeclaration;
import org.apache.xerces.xs.XSImplementation;
import org.apache.xerces.xs.XSLoader;
import org.apache.xerces.xs.XSModel;
import org.apache.xerces.xs.XSModelGroup;
import org.apache.xerces.xs.XSNamedMap;
import org.apache.xerces.xs.XSObjectList;
import org.apache.xerces.xs.XSParticle;
import org.apache.xerces.xs.XSSimpleTypeDefinition;
import org.apache.xerces.xs.XSTerm;
import org.apache.xerces.xs.XSTypeDefinition;

import org.w3c.dom.bootstrap.DOMImplementationRegistry;

public class SchemaParser {

    public static void main(String[] args) {

        // Get DOM Implementation using DOM Registry
        System.setProperty(DOMImplementationRegistry.PROPERTY,
                           "org.apache.xerces.dom.DOMXSImplementationSourceImpl");

        DOMImplementationRegistry registry;
        try {
            registry = DOMImplementationRegistry.newInstance();
            XSImplementation impl = (XSImplementation)registry.getDOMImplementation("XS-Loader");

            XSLoader schemaLoader = impl.createXSLoader(null);

            XSModel model = schemaLoader
                .loadURI("file:///data/greenlight/src/packages/greenlight-feeds/camel-spring-2.11.1.xsd");

            XSNamedMap simpleDefinitions = model.getComponents(XSTypeDefinition.SIMPLE_TYPE);

            for (Object key : simpleDefinitions.keySet()) {

                XSSimpleTypeDefinition obj = (XSSimpleTypeDefinition)simpleDefinitions.get(key);

                StringList sl = obj.getLexicalEnumeration();
                String name = obj.getName();
                System.out.println(String.format("%s: %s", name, sl));

            }

            XSNamedMap complexDefinitions = model.getComponents(XSTypeDefinition.COMPLEX_TYPE);

            for (Object key : complexDefinitions.keySet()) {

                XSComplexTypeDefinition typeDef = (XSComplexTypeDefinition)complexDefinitions.get(key);
                String name = typeDef.getName();

                XSModelGroup modelGroup = (XSModelGroup)typeDef.getParticle().getTerm();

                XSObjectList particles = modelGroup.getParticles();
                
                List<XSElementDeclaration> ces = new 
                    ArrayList<XSElementDeclaration>();

                for (int i = 0; i < particles.getLength(); ++i) {
                    XSParticle particle = (XSParticle)particles.item(i);
                    XSTerm term = particle.getTerm();

                    XSObjectList annotations = particle.getAnnotations();

                    if (term instanceof XSElementDeclaration) {
                        
                        XSElementDeclaration newElement = (XSElementDeclaration)term;

                        if (newElement.getTypeDefinition().getTypeCategory() == XSTypeDefinition.SIMPLE_TYPE) {
                            System.out.print("Simple element: " + newElement.getName());

                            XSObjectList simpleElementAnnotations = newElement.getAnnotations();

                            //printAnnotations(simpleElementAnnotations);
                        } else if (newElement.getTypeDefinition().getTypeCategory() == XSTypeDefinition.COMPLEX_TYPE) {
                            ces.add(newElement);
                        } else {
                            System.out.println("Other type.");
                        }
                    } else {
                        System.out.println("Something else.");
                    }
                }

                for (XSElementDeclaration e : ces) {
                    // process(e);
                }

            }

        } catch (ClassCastException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (InstantiationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

}
